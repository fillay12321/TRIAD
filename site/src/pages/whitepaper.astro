---
import BaseLayout from '@layouts/BaseLayout.astro';
const baseRaw = import.meta.env.BASE_URL || '/';
const base = baseRaw.endsWith('/') ? baseRaw : baseRaw + '/';
const withBase = (path: string) => base + path.replace(/^\/+/, '');
---
<BaseLayout title="Whitepaper — TRIAD" description="TRIAD Whitepaper: Quantum-Inspired High-Throughput Layer-1 Blockchain">
  <section class="relative">
    <div class="relative mx-auto max-w-6xl px-4 py-12">
      <header class="mb-8">
        <h1 class="text-3xl md:text-4xl font-bold tracking-tight">TRIAD Whitepaper: Quantum-Inspired High-Throughput Layer-1 Blockchain</h1>
        <p class="mt-3 text-mist max-w-3xl">A concise technical overview: problem, architecture, performance, security, comparisons, and roadmap.</p>
      </header>

      <article class="space-y-8">
        <section class="rounded-xl border border-white/10 bg-white/5 p-5">
          <h2 class="text-xl font-semibold">Abstract</h2>
          <p class="mt-2 text-white/80">TRIAD is a quantum-inspired Layer-1 blockchain protocol implemented in Rust, leveraging wave interference for probabilistic consensus in a Directed Acyclic Graph (DAG) structure. It achieves high throughput (11–13K TPS peak, 8–9K sustained in local demos) with energy efficiency, parallel processing, and lightweight cryptography. Designed for scalability, TRIAD addresses bottlenecks in traditional L1s like global ordering and verification overheads. Open-source on GitHub: <a class="underline" href="https://github.com/fillay12321/TRIAD" target="_blank" rel="noopener">github.com/fillay12321/TRIAD</a>. This whitepaper outlines the problem, architecture, performance, security, comparisons, and roadmap.</p>
        </section>

        <section class="rounded-xl border border-white/10 bg-white/5 p-5">
          <h2 class="text-xl font-semibold">1. Introduction</h2>
          <h3 class="mt-3 text-lg font-semibold">1.1 Problem Statement</h3>
          <p class="mt-2 text-white/80">Traditional Layer-1 blockchains face scalability trilemma: balancing decentralization, security, and throughput. Ethereum's PoS limits ~15–30 TPS due to sequential processing and mempool bottlenecks. Solana achieves thousands TPS but suffers from network congestion and centralization risks. Aptos/Sui use parallelism but require complex BFT variants. Avalanche's probabilistic subsampling is efficient but lacks field-based scoring. Key issues: high cryptographic verification costs, CPU/GPU underutilization, and energy-intensive consensus.</p>
          <h3 class="mt-3 text-lg font-semibold">1.2 Insight and Solution</h3>
          <p class="mt-2 text-white/80">TRIAD introduces a quantum-inspired model where transactions are "waves" interfering in a DAG field. Constructive interference validates batches probabilistically, minimizing rounds and overheads. Built on Rust for safety and performance, it uses sharding, Rayon parallelism, and Ed25519 batch verification. This enables lightweight, batch-friendly consensus without heavy voting, targeting 25.8K TPS in optimized setups.</p>
        </section>

        <section class="rounded-xl border border-white/10 bg-white/5 p-5">
          <h2 class="text-xl font-semibold">2. Core Technology</h2>
          <h3 class="mt-3 text-lg font-semibold">2.1 Consensus Mechanism</h3>
          <ul class="mt-2 list-disc pl-5 text-white/80 space-y-1">
            <li><b>Wave Construction:</b> Each transaction becomes a "quantum wave" with amplitude (A), phase (φ), and Time-To-Live (TTL).</li>
            <li><b>Signing:</b> Parallel Ed25519 signing via Rayon (pinned to physical cores).</li>
            <li><b>Batch Verification:</b> True batch via ed25519-zebra (batch size: 250–500, RNG: rand07::rngs::OsRng); fallback to ed25519-dalek parallel verifies.</li>
            <li><b>Interference Field:</b> Compute interference over valid waves per shard; analyze constructive/destructive patterns.</li>
            <li><b>Decision:</b> ConsensusReached (accept) or ConflictDetected (reject) based on pattern constructiveness, fee factor, phase conflict, TTL, and reputation heuristics.</li>
            <li><b>Ordering:</b> Probabilistic via interference; global finality planned.</li>
          </ul>
          <div class="mt-4 rounded-lg border border-white/10 bg-black/30 p-4">
            <div class="text-sm text-white/70">Pipeline (per round, default 500 tx)</div>
            <ol class="mt-2 list-decimal pl-5 text-sm text-white/80 space-y-1">
              <li>Batch generation/reception</li>
              <li>Sharding for parallel lanes</li>
              <li>Wave signing (~15–16 ms for 500 waves)</li>
              <li>Batch verification (~7–8 ms for 2×250)</li>
              <li>Interference computation (~18–25 ms, CPU fallback)</li>
              <li>Decision and metrics logging</li>
            </ol>
            <p class="mt-2 text-xs text-white/60">Validity requires valid WaveSignature. No strict total ordering in demo; DAG ensures causal consistency.</p>
          </div>

          <h3 class="mt-6 text-lg font-semibold">2.2 Architecture</h3>
          <ul class="mt-2 list-disc pl-5 text-white/80 space-y-1">
            <li><b>Language:</b> Rust with Rayon for CPU parallelism.</li>
            <li><b>Sharding:</b> Static per-round for independent processing.</li>
            <li><b>Cryptography:</b> Ed25519 (dalek for keys/singles, zebra for batches). Planned: BLS for validator aggregation.</li>
            <li><b>Performance Knobs:</b> TRIAD_WAVE_SIG_BATCH (500 rec.), RAYON_NUM_THREADS (physical cores), LTO fat, panic=abort.</li>
            <li><b>DAG Structure:</b> Transactions as nodes; edges via interference dependencies.</li>
            <li><b>Execution:</b> Parallel shard lanes; no EVM yet (roadmap).</li>
          </ul>
        </section>

        <section class="rounded-xl border border-white/10 bg-white/5 p-5">
          <h2 class="text-xl font-semibold">3. Performance Metrics</h2>
          <ul class="mt-2 list-disc pl-5 text-white/80 space-y-1">
            <li><b>Local demo (4-core i7-2.7 GHz):</b></li>
            <li>Peak TPS: 11–13K</li>
            <li>Sustained TPS: 8–9K @ 500 tx/round</li>
            <li>Round Time: 43–60 ms</li>
            <li>Signing: 15–16 ms</li>
            <li>Verification: 7–8 ms (expected 1–3 ms at batch=500)</li>
            <li>Interference: 18–25 ms</li>
          </ul>
          <p class="mt-3 text-xs text-white/60">Disclaimer: Single-machine; distributed benchmarks pending. Targets: 25.8K TPS with SIMD/AVX2/GPU.</p>
        </section>

        <section class="rounded-xl border border-white/10 bg-white/5 p-5">
          <h2 class="text-xl font-semibold">4. Comparative Analysis</h2>
          <div class="mt-3 overflow-auto rounded-lg border border-white/10">
            <table class="min-w-full text-sm">
              <thead class="bg-white/10 text-white">
                <tr>
                  <th class="px-3 py-2 text-left">Protocol</th>
                  <th class="px-3 py-2 text-left">Consensus</th>
                  <th class="px-3 py-2 text-left">Throughput (L1)</th>
                  <th class="px-3 py-2 text-left">Parallelism/Exec</th>
                  <th class="px-3 py-2 text-left">Key Differences from TRIAD</th>
                </tr>
              </thead>
              <tbody class="divide-y divide-white/10 text-white/80">
                <tr>
                  <td class="px-3 py-2">Ethereum</td>
                  <td class="px-3 py-2">PoS + Proposer/Builder</td>
                  <td class="px-3 py-2">15–30 TPS</td>
                  <td class="px-3 py-2">EVM (sequential)</td>
                  <td class="px-3 py-2">TRIAD: Higher throughput via batching; lacks global ordering today.</td>
                </tr>
                <tr>
                  <td class="px-3 py-2">Solana</td>
                  <td class="px-3 py-2">PoH + Tower BFT</td>
                  <td class="px-3 py-2">Thousands TPS</td>
                  <td class="px-3 py-2">SIMD/GPU</td>
                  <td class="px-3 py-2">TRIAD: Simpler probabilistic model; immature networking.</td>
                </tr>
                <tr>
                  <td class="px-3 py-2">Aptos/Sui</td>
                  <td class="px-3 py-2">HotStuff Variants + Parallel</td>
                  <td class="px-3 py-2">Thousands TPS</td>
                  <td class="px-3 py-2">Move/Parallel Exec</td>
                  <td class="px-3 py-2">TRIAD: Lightweight interference; no formal BFT yet.</td>
                </tr>
                <tr>
                  <td class="px-3 py-2">Avalanche</td>
                  <td class="px-3 py-2">Snow Family (Probabilistic)</td>
                  <td class="px-3 py-2">Thousands TPS</td>
                  <td class="px-3 py-2">Subsampling</td>
                  <td class="px-3 py-2">TRIAD: Field-based scoring vs subsampling; not network-evaluated.</td>
                </tr>
              </tbody>
            </table>
          </div>
          <p class="mt-3 text-mist">TRIAD excels in local parallelism and batch efficiency but trails in maturity.</p>
        </section>

        <section class="rounded-xl border border-white/10 bg-white/5 p-5">
          <h2 class="text-xl font-semibold">5. Security and Limitations</h2>
          <h3 class="mt-3 text-lg font-semibold">5.1 Security Features</h3>
          <ul class="mt-2 list-disc pl-5 text-white/80 space-y-1">
            <li>Signatures: Ed25519 with strict filtering.</li>
            <li>Batch Integrity: Zebra verifies; fallback ensures no invalid waves.</li>
            <li>Auditing: Deterministic logging/profiling.</li>
            <li>Planned: BLS aggregation, interference safety proofs, libp2p/QUIC networking, Noise protocol, DoS hardening.</li>
          </ul>
          <h3 class="mt-4 text-lg font-semibold">5.2 Limitations</h3>
          <ul class="mt-2 list-disc pl-5 text-white/80 space-y-1">
            <li>Demo-only: No distributed networking/global finality.</li>
            <li>CPU-bound: GPU disabled.</li>
            <li>No EVM/runtime.</li>
            <li>No formal proofs for interference adversarial resilience.</li>
          </ul>
        </section>

        <section class="rounded-xl border border-white/10 bg-white/5 p-5">
          <h2 class="text-xl font-semibold">6. Roadmap</h2>
          <ul class="mt-2 list-disc pl-5 text-white/80 space-y-1">
            <li>Phase 0 (0–2 months): Demo hardening (cache keys, stabilize batches, build tuning).</li>
            <li>Phase 1 (2–4 months): SIMD/AVX2, GPU kernels, benchmarks.</li>
            <li>Phase 2 (4–7 months): Networking (libp2p/QUIC), global ordering, BLS.</li>
            <li>Phase 3 (7–10 months): Interoperability, RPC, SDKs, fee tuning.</li>
            <li>Phase 4 (10–14 months): AI/ML for resharding, anomaly detection.</li>
          </ul>
        </section>

        <section class="rounded-xl border border-white/10 bg-white/5 p-5">
          <h2 class="text-xl font-semibold">7. Economics and Governance</h2>
          <p class="mt-2 text-white/80">(Placeholder: Tokenomics TBD. Staking for validators, fees for waves. Governance via interference-weighted proposals.)</p>
        </section>

        <section class="rounded-xl border border-white/10 bg-white/5 p-5">
          <h2 class="text-xl font-semibold">8. Team and Community</h2>
          <ul class="mt-2 list-disc pl-5 text-white/80 space-y-1">
            <li>Creator: Independent developer (fillay12321 on GitHub).</li>
            <li>Open for contributions: PRs, issues via CONTRIBUTING.md.</li>
            <li>Community: Join @TRIADBlockchain on X; Discord/Telegram planned.</li>
          </ul>
        </section>

        <section class="rounded-xl border border-white/10 bg-white/5 p-5">
          <h2 class="text-xl font-semibold">9. Conclusion</h2>
          <p class="mt-2 text-white/80">TRIAD pioneers quantum-inspired consensus for scalable, efficient blockchain. With high TPS and low overheads, it positions as a next-gen L1. Early adopters: Build high-throughput apps (payments, gaming). Contact: <a class="underline" href="mailto:keshashel@gmail.com">keshashel@gmail.com</a>.</p>
        </section>

        <section class="rounded-xl border border-white/10 bg-white/5 p-5">
          <h2 class="text-xl font-semibold">References</h2>
          <p class="mt-2 text-white/80">Based on internal demo; external benchmarks from public sources (Ethereum.org, Solana docs). MIT License.</p>
        </section>
      </article>

      <div class="mt-10">
        <a href={withBase('documentation')} class="inline-flex items-center rounded-lg border border-white/20 bg-white/10 px-4 py-2 text-sm hover:bg-white/15">← Back to Documentation</a>
      </div>
    </div>
  </section>
</BaseLayout>
